import type {Address} from '../../autogenerated';

export type ExtendedAddress = Address & {
    zipCity: string;
};

const getAddressUrl = (zip: number) =>
    `https://dawa.aws.dk/adgangsadresser?struktur=mini&postnr=${zip.toString()}`;

type DawaZip = {
    nr: string;
    navn: string;
};

type DawaAddress = {
    vejnavn: string;
    husnr: string;
    x: number;
    y: number;
};

const DAWA_ZIP_URL = 'https://dawa.aws.dk/postnumre?landpostnumre&struktur=mini';
async function getDawaZips(): Promise<DawaZip[]> {
    let data: DawaZip[] = [];
    try {
        const response = await fetch(DAWA_ZIP_URL);
        data = await response.json();
    } catch (error) {
        console.error(error);
    }

    return data;
}

async function getDawaAddresses(zip: number): Promise<DawaAddress[]> {
    let data: DawaAddress[] = [];
    try {
        const response = await fetch(getAddressUrl(zip));
        data = await response.json();
    } catch (error) {
        console.error(error);
    }

    return data;
}

export async function fetchZips(): Promise<ExtendedAddress[]> {
    const dawaZips = await getDawaZips();
    const zips = dawaZips.map(
        (dawaZip) =>
            ({
                street: '',
                city: dawaZip.navn,
                zip: parseInt(dawaZip.nr),
                coords: {},
                zipCity: `${dawaZip.nr} - ${dawaZip.navn}`,
            } as ExtendedAddress)
    );

    return zips;
}

export async function fetchAddresses(
    address: ExtendedAddress | undefined
): Promise<ExtendedAddress[]> {
    if (address) {
        const dawaAddresses = await getDawaAddresses(address.zip);
        const addresses: ExtendedAddress[] = dawaAddresses.map((dawaAddress) => ({
            ...address,
            street: `${dawaAddress.vejnavn} ${dawaAddress.husnr}`,
            coords: {longitude: dawaAddress.y, latitude: dawaAddress.x},
        }));

        return addresses;
    }

    return [];
}

export default {
    fetchAddresses,
    fetchZips,
};
