import React, {useEffect, useState} from 'react';
import Chip from '@mui/material/Chip';
import makeStyles from '@mui/styles/makeStyles';

import {DialogModal} from '../../shared/components/modal/DialogModal';
import {Header} from '../../shared/components/Texts';
import StringUtil from '../util/StringUtil';
import {Table, type TableColumn, type TableData} from '../../shared/components/Table';
import {MessageType, type MessageDto} from '../../autogenerated';
import {Box, Grid} from '@mui/material';

const useStyles = makeStyles({
    badge: {
        top: 0,
        marginLeft: 5,
    },
    box: {
        alignItems: 'center',
        display: 'flex',
        flexDirection: 'column',
    },
});

type Props = {
    receivedMessages: MessageDto[];
    sentMessages: MessageDto[];
    sendMessage: (message: any) => void;
};

const getTitle = (sent: boolean, tableColumn = true, capitalize = true) => {
    if (tableColumn) {
        const result = sent ? 'receiver' : 'sender';

        return capitalize ? StringUtil.capitalize(result) : result;
    }

    return sent ? 'Sent Messages' : 'Received Messages';
};

export const MessageContainer: React.FC<Props> = ({
    receivedMessages,
    sentMessages,
    sendMessage,
}: Props) => {
    const styles = useStyles();
    const [showDialog, setShowDialog] = useState(false);
    const [replyMode, setReplyMode] = useState(false);

    const [selectedMessage, setSelectedMessage] = useState<MessageDto>();
    const [showSentMessages, setShowSentMessages] = useState(false);

    const handleSubmit = (newMessageContent: string) => {
        if (replyMode && selectedMessage) {
            const message: any = {
                receiverId: selectedMessage.senderId,
                senderId: selectedMessage.receiverId,
                title: 'Enquiry',
                content: newMessageContent,
                type: MessageType.Enquiry,
            };

            sendMessage(message);
            setShowDialog(false);
        }

        setReplyMode(!replyMode);
    };

    useEffect(() => {
        setReplyMode(false);
    }, [showDialog]);

    const columns: TableColumn[] = [
        {title: 'id', field: 'id', hidden: true},
        {title: 'Title', field: 'title'},
        {title: getTitle(showSentMessages), field: getTitle(showSentMessages, true, false)},
        {title: 'Date', field: 'date'},
    ];

    const actions = [
        {
            icon: () => <Chip size="small" label="Open" clickable color="primary" />,
            tooltip: 'Open Message',
            onClick: (event: any, rowData: Partial<MessageDto>) => {
                setSelectedMessage(rowData);
                setShowDialog(true);
            },
        },
        {
            icon: () => <Chip size="small" label="Delete" clickable color="secondary" />,
            tooltip: 'Delete Message',
            onClick: (event: any, rowData: Partial<MessageDto>) => {
                console.log(event);
                console.log(rowData);
                console.log('Delete');
            },
        },
    ];

    return (
        <Box className={styles.box}>
            <Header text={getTitle(showSentMessages, false)} />

            <Grid container justifyContent="center">
                <DialogModal
                    show={showDialog}
                    replyMode={replyMode}
                    title={replyMode ? 'Send Message' : selectedMessage?.title ?? ''}
                    text={selectedMessage?.content ?? ''}
                    onSubmit={handleSubmit}
                    close={() => setShowDialog(false)}
                />

                <Grid item xs={8}>
                    <Table
                        actions={actions}
                        columns={columns}
                        data={(showSentMessages ? sentMessages : receivedMessages) as TableData}
                        emptyMessage="No messages yet"
                        title={
                            <Chip
                                className={styles.badge}
                                size="small"
                                label={`Show ${getTitle(!showSentMessages, false)}`}
                                clickable
                                color="primary"
                                onClick={() => setShowSentMessages(!showSentMessages)}
                            />
                        }
                    />
                </Grid>
            </Grid>
        </Box>
    );
};
