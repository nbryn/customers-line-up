import Cookies from 'js-cookie';

import {AuthApi} from '../../autogenerated';
import type {LoginRequest, RegisterRequest} from '../../autogenerated';
import {USER_TAG, baseApi} from '../../app/Store';
import {apiMutation} from '../../shared/api/Api';

const LOGIN_FAILED_MSG = 'Wrong Email/Password';

const authApiInstance = new AuthApi();

const authApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
        login: builder.mutation<void, LoginRequest>({
            invalidatesTags: [USER_TAG],
            queryFn: async (loginRequest, api) => ({
                data: await apiMutation(
                    async () => {
                        const response = await authApiInstance.login(loginRequest);
                        Cookies.set('access_token', response.data.token!);
                        return response;
                    },
                    api,
                    {message: LOGIN_FAILED_MSG}
                ),
            }),
        }),
        register: builder.mutation<void, RegisterRequest>({
            invalidatesTags: [USER_TAG],
            queryFn: async (registerRequest, api) => ({
                data: await apiMutation(async () => {
                    const response = await authApiInstance.register(registerRequest);
                    Cookies.set('access_token', response.data.token!);
                    return response;
                }, api),
            }),
        }),
    }),
});

export const {useLoginMutation, useRegisterMutation} = authApi;
