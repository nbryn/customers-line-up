import React from 'react';
import {Col, FormGroup, Row} from 'react-bootstrap';
import makeStyles from '@mui/styles/makeStyles';

import {Card} from '../../shared/components/card/Card';
import {ComboBox} from '../../shared/components/form/ComboBox';
import type {ComboBoxOption} from '../../shared/components/form/ComboBox';
import {Form} from '../../shared/components/form/Form';
import {registerValidationSchema} from '../user/UserValidation';
import StringUtil from '../../shared/util/StringUtil';
import {TextField} from '../../shared/components/form/TextField';
import TextFieldUtil from '../../shared/util/TextFieldUtil';
import {AddressKey, useAddress} from '../../shared/hooks/useAddress';
import {useForm} from '../../shared/hooks/useForm';
import type {Address, RegisterRequest} from '../../autogenerated';
import type {Index} from '../../shared/models/General';
import {useRegisterMutation} from './AuthApi';

const useStyles = makeStyles(() => ({
    card: {
        marginTop: 60,
        height: 675,
        borderRadius: 15,
        //boxShadow: '0px 0px 0px 8px rgba(12, 12, 242, 0.1)',
        textAlign: 'center',
    },
    helperText: {
        color: 'red',
    },
    textField: {
        width: '51%',
        marginTop: 10,
    },
    wrapper: {
        justifyContent: 'center',
    },
}));

export const RegisterView: React.FC = () => {
    const styles = useStyles();
    const [register] = useRegisterMutation();

    const address = {
        zip: 0,
        street: '',
    } as Address;

    const formValues: RegisterRequest = {
        email: '',
        name: '',
        password: '',
        address: address,
    };

    const {formHandler} = useForm<RegisterRequest & Index>({
        initialValues: formValues,
        validationSchema: registerValidationSchema,
        onSubmit: async (registerRequest) => await register(registerRequest),
        beforeSubmit: (request) => {
            const address = addressHandler.addresses.find(
                (x) => x.street === request.address.street
            );

            request.address.coords.longitude = address?.longitude ?? 0;
            request.address.coords.latitude = address?.latitude ?? 0;
            request.address.city = address?.city ?? '';
            request.address.zip = parseInt(address?.zip ?? '0');
            return request;
        },
    });

    const addressHandler = useAddress(formHandler);

    return (
        <Row className={styles.wrapper}>
            <Col sm={10} lg={6}>
                <Card className={styles.card} title="Register">
                    <Form
                        onSubmit={formHandler.handleSubmit}
                        buttonText="Register"
                        valid={formHandler.isValid}
                        showMessage
                    >
                        {['zip', 'city'].map((key) => {
                            return (
                                <FormGroup key={key}>
                                    <ComboBox
                                        id={key}
                                        style={{
                                            width: '51.5%',
                                            marginLeft: 129,
                                            marginTop: 25,
                                        }}
                                        label={StringUtil.capitalize(key)}
                                        type="text"
                                        options={addressHandler.getLabels(key as AddressKey)}
                                        onBlur={formHandler.handleBlur}
                                        setFieldValue={(option: ComboBoxOption, formFieldId) =>
                                            formHandler.setFieldValue(formFieldId, option.label)
                                        }
                                        error={
                                            formHandler.touched[key] &&
                                            Boolean(formHandler.errors[key])
                                        }
                                        helperText={
                                            formHandler.touched[key] && formHandler.errors[key]
                                        }
                                        defaultLabel={
                                            key === 'street' ? 'street - After Zip' : 'Zip'
                                        }
                                    />
                                </FormGroup>
                            );
                        })}
                        {Object.keys(formValues).map((key) => {
                            return (
                                <FormGroup key={key}>
                                    <TextField
                                        className={styles.textField}
                                        id={key}
                                        label={StringUtil.capitalize(key)}
                                        type={TextFieldUtil.mapKeyToType(key)}
                                        value={formHandler.values[key] as string}
                                        onChange={formHandler.handleChange}
                                        onBlur={formHandler.handleBlur}
                                        error={
                                            formHandler.touched[key] &&
                                            Boolean(formHandler.errors[key])
                                        }
                                        helperText={
                                            formHandler.touched[key] && formHandler.errors[key]
                                        }
                                    />
                                </FormGroup>
                            );
                        })}
                    </Form>
                </Card>
            </Col>
        </Row>
    );
};
