import React, {useState} from 'react';
import makeStyles from '@mui/styles/makeStyles';
import {Box, Chip, Grid} from '@mui/material';

import {useDeleteUserBookingMutation} from './BookingApi';
import {Header} from '../../shared/components/Texts';
import {MapModal, defaultMapProps} from '../../shared/components/modal/MapModal';
import type {MapModalProps} from '../../shared/components/modal/MapModal';
import {Table, type TableData, type TableColumn} from '../../shared/components/Table';
import {useGetUserQuery} from '../user/UserApi';
import type {BookingDto} from '../../autogenerated';
import FormatUtil from '../../shared/util/FormatUtil';

type BookingTableRowData = Pick<BookingDto, 'id' | 'business' | 'timeSlotId' | 'date'> & {
    interval: string;
    street: string;
    latitude: number;
    longitude: number;
};

const useStyles = makeStyles({
    box: {
        alignItems: 'center',
        display: 'flex',
        flexDirection: 'column',
    },
});

const mapBookingsToTableData = (bookings: BookingDto[] | undefined | null): TableData =>
    bookings?.map((booking) => ({
        id: booking?.id ?? '',
        timeSlotId: booking?.timeSlotId ?? '',
        date: booking?.date ?? '',
        interval: FormatUtil.formatInterval(booking?.interval),
        business: booking?.business ?? '',
        street: booking?.street ?? '',
        latitude: booking?.coords?.latitude ?? 0,
        longitude: booking?.coords?.longitude ?? 0,
    })) ?? [];

export const UserBookingView: React.FC = () => {
    const [mapModalInfo, setMapModalInfo] = useState<MapModalProps>(defaultMapProps);
    const styles = useStyles();

    const [deleteBookingForUser] = useDeleteUserBookingMutation();
    const {data: user} = useGetUserQuery();

    const columns: TableColumn[] = [
        {title: 'id', field: 'id', hidden: true},
        {title: 'timeSlotId', field: 'timeSlotId', hidden: true},
        {title: 'latitude', field: 'latitude', hidden: true},
        {title: 'longitude', field: 'longitude', hidden: true},
        {title: 'coords', field: 'coords', hidden: true},
        {title: 'Date', field: 'date'},
        {title: 'Interval', field: 'interval'},
        {title: 'Business & City', field: 'business'},
        {title: 'Street', field: 'street'},
    ];

    const actions = [
        {
            icon: () => <Chip size="small" label="Delete" clickable color="primary" />,
            tooltip: 'Delete Booking',
            onClick: async (_: any, rowData: BookingTableRowData) => {
                await deleteBookingForUser(rowData.id ?? '');
            },
        },
        {
            icon: () => <Chip size="small" label="See on map" clickable color="secondary" />,
            tooltip: 'Show location on map',
            onClick: (_: any, rowData: BookingTableRowData) => {
                setMapModalInfo({
                    open: true,
                    title: rowData.business ?? '',
                    zoom: 14,
                    center: [rowData.longitude, rowData.latitude],
                    markers: [[rowData.longitude, rowData.latitude], 13],
                });
            },
        },
    ];

    return (
        <Box className={styles.box}>
            <Header text="Your Bookings" />
            <Grid container justifyContent="center">
                <MapModal
                    open={mapModalInfo.open}
                    setVisible={() => setMapModalInfo(defaultMapProps)}
                    zoom={mapModalInfo.zoom}
                    center={mapModalInfo.center}
                    markers={mapModalInfo.markers}
                />
                <Grid item xs={7}>
                    <Table
                        actions={actions}
                        columns={columns}
                        data={mapBookingsToTableData(user?.bookings)}
                        title="Bookings"
                        noDataMessage="No Bookings Yet"
                    />
                </Grid>
            </Grid>
        </Box>
    );
};
