import React from 'react';
import {Col, Row} from 'react-bootstrap';
import makeStyles from '@mui/styles/makeStyles';

import {businessValidationSchema} from './BusinessValidation';
import {ErrorView} from '../../shared/views/ErrorView';
import {FormCard} from '../../shared/components/card/FormCard';
import {Header} from '../../shared/components/Texts';
import {useAppSelector} from '../../app/Store';
import {useAddress} from '../../shared/hooks/useAddress';
import {type Index, useForm} from '../../shared/hooks/useForm';
import {selectCurrentBusiness} from './BusinessState';
import {useUpdateBusinessMutation} from './BusinessApi';
import {BusinessType, type UpdateBusinessRequest} from '../../autogenerated';

const useStyles = makeStyles(() => ({
    col: {
        marginTop: 25,
    },
    row: {
        justifyContent: 'center',
    },
}));

const getIndex = (key: string) => {
    if (key === 'name') return 1;
    if (key === 'zip') return 2;
    if (key === 'street') return 3;
    if (key === 'type') return 4;
    if (key === 'capacity') return 5;
    if (key === 'timeSlotLength') return 6;
    if (key === 'opens') return 7;
    if (key === 'closes') return 8;
};

export const BusinessProfileView: React.FC = () => {
    const styles = useStyles();
    const [updateBusiness] = useUpdateBusinessMutation();

    const business = useAppSelector(selectCurrentBusiness);
    if (!business) {
        return <ErrorView />;
    }

    const formValues = {
        name: business.name ?? '',
        zip: business.address?.zip,
        street: business.address?.street,
        type: business.type,
        capacity: business.capacity,
        timeSlotLength: business.timeSlotLength,
        opens: business.businessHours?.start,
        closes: business.businessHours?.end,
    };

    const {formHandler} = useForm<typeof formValues & Index>({
        initialValues: formValues,
        validationSchema: businessValidationSchema,
        onSubmit: async (formValues) => {
            const address = addressHandler.addresses.find(
                (address) => address.street === formValues.street
            );

            await updateBusiness({
                ...formValues,
                businessId: business.id,
                address,
            } as UpdateBusinessRequest);
        },
    });

    const addressHandler = useAddress(formHandler);

    return (
        <>
            <Row className={styles.row}>
                <Header text={`Manage ${business.name}`} />
            </Row>
            <Row className={styles.row}>
                <Col sm={12} md={6} lg={10} className={styles.col}>
                    <FormCard
                        title="Business Data"
                        formData={formValues}
                        entity={business}
                        buttonText="Save Changes"
                        primaryDisabled={!formHandler.isValid}
                        buttonAction={formHandler.handleSubmit}
                        formHandler={formHandler}
                        addressHandler={addressHandler}
                        getIndex={getIndex}
                        selectOptions={Object.values(BusinessType)}
                    />
                </Col>
            </Row>
        </>
    );
};
