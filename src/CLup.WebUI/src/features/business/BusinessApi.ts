import Cookies from 'js-cookie';

import {
    BUSINESS_ALL_TAG,
    BUSINESS_BY_OWNER_TAG,
    BUSINESS_TAG,
    baseApi,
    USER_TAG,
} from '../../app/Store';
import {
    BusinessApi,
    Configuration,
    type CreateBusinessRequest,
    type GetAllBusinessesResponse,
    type UpdateBusinessRequest,
    type GetBusinessResponse,
} from '../../autogenerated';
import {apiMutation, apiQuery} from '../../shared/api/Api';
import {BUSINESS_ROUTE} from '../../app/Routes';

const BUSINESS_UPDATED_MSG = 'Business Updated';

const BUSINESS_CREATED_SUCCESS_INFO = {
    message: 'Business Created - Go to my businesses to see your businesses',
    toastInfo: {buttonText: 'My Businesses', navigateTo: BUSINESS_ROUTE},
};

const businessApiInstance = new BusinessApi(
    new Configuration({accessToken: Cookies.get('access_token')})
);

const businessApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
        getBusinessById: builder.query<GetBusinessResponse, string>({
            providesTags: [BUSINESS_TAG],
            queryFn: async (businessId, api) => ({
                data: await apiQuery(
                    async (queryApi) => await queryApi.getBusiness(businessId),
                    api
                ),
            }),
        }),

        getAllBusinesses: builder.query<GetAllBusinessesResponse, void>({
            providesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG],
            queryFn: async (_, api) => ({
                data: await apiQuery(async (queryApi) => await queryApi.getAllBusinesses(), api),
            }),
        }),
        createBusiness: builder.mutation<void, CreateBusinessRequest>({
            invalidatesTags: [BUSINESS_ALL_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (createBusinessRequest, api) => ({
                data: await apiMutation(
                    async () => await businessApiInstance.createBusiness(createBusinessRequest),
                    api,
                    BUSINESS_CREATED_SUCCESS_INFO
                ),
            }),
        }),
        updateBusiness: builder.mutation<void, UpdateBusinessRequest>({
            invalidatesTags: [BUSINESS_ALL_TAG, BUSINESS_BY_OWNER_TAG],
            queryFn: async (updateBusinessRequest, api) => ({
                data: await apiMutation(
                    async () => await businessApiInstance.updateBusiness(updateBusinessRequest),
                    api,
                    {message: BUSINESS_UPDATED_MSG}
                ),
            }),
        }),
    }),
});

export const {
    useGetBusinessByIdQuery,
    useGetAllBusinessesQuery,
    useUpdateBusinessMutation,
    useCreateBusinessMutation,
} = businessApi;
