import React, {useEffect, useState} from 'react';
import {Col, FormGroup, Row} from 'react-bootstrap';
import makeStyles from '@mui/styles/makeStyles';

import {Card} from '../../shared/components/card/Card';
import {ComboBox} from '../../shared/components/form/ComboBox';
import type {ComboBoxOption} from '../../shared/components/form/ComboBox';
import {useCreateEmployeeMutation} from './EmployeeApi';
import {employeeValidationSchema} from '../business/BusinessValidation';
import {ErrorView} from '../../shared/views/ErrorView';
import {useUsersNotEmployedByBusinessQuery} from '../user/UserApi';
import {Form} from '../../shared/components/form/Form';
import {Header} from '../../shared/components/Texts';
import {selectCurrentBusiness} from '../business/BusinessState';
import {TextField} from '../../shared/components/form/TextField';
import {useAppSelector} from '../../app/Store';
import {type Index, useForm} from '../../shared/hooks/useForm';
import {type CreateEmployeeRequest, type UserDto} from '../../autogenerated';

const useStyles = makeStyles(() => ({
    card: {
        borderRadius: 15,
        height: 600,
        textAlign: 'center',
    },
    formGroup: {
        marginBottom: 30,
    },
    helperText: {
        color: 'red',
    },
    textField: {
        width: '35%',
    },
    wrapper: {
        justifyContent: 'center',
    },
}));

export const CreateEmployeeView: React.FC = () => {
    const [showComboBox, setShowComBox] = useState(true);
    const [selectedUser, setSelectedUser] = useState<UserDto>();

    const styles = useStyles();
    const business = useAppSelector(selectCurrentBusiness);
    const [createEmployee] = useCreateEmployeeMutation();

    if (!business) {
        return <ErrorView />;
    }

    const {data: usersNotEmployedByBusinessResponse} = useUsersNotEmployedByBusinessQuery(
        business.id ?? ''
    );

    const formValues = {
        companyEmail: '',
    };

    const {formHandler, ...form} = useForm<typeof formValues & Index>({
        initialValues: formValues,
        validationSchema: employeeValidationSchema,
        onSubmit: async (formValues) =>
            await createEmployee({
                businessId: business.id,
                userId: selectedUser?.id,
                companyEmail: formValues.companyEmail,
            } as CreateEmployeeRequest),
    });

    useEffect(() => {
        if (!selectedUser) {
            setShowComBox(false);
        }
    }, [selectedUser]);

    return (
        <>
            <Row className={styles.wrapper}>
                <Header text={business.name ?? ''} />
            </Row>
            <Row className={styles.wrapper}>
                <Col sm={6} lg={6}>
                    <Card
                        className={styles.card}
                        title="New Employee"
                        subtitle="Choose an existing user you want to add as an employee"
                        variant="outlined"
                    >
                        {showComboBox && usersNotEmployedByBusinessResponse?.users && (
                            <ComboBox
                                style={{marginTop: 10, marginLeft: 110, width: '60%'}}
                                label="Email"
                                id="email"
                                type="text"
                                options={usersNotEmployedByBusinessResponse.users.map((user) => ({
                                    label: user.email ?? '',
                                    value: user.name ?? '',
                                }))}
                                setFieldValue={(option: ComboBoxOption) =>
                                    setSelectedUser(
                                        usersNotEmployedByBusinessResponse.users?.find(
                                            (user) => user.email === option.label
                                        )
                                    )
                                }
                                partOfForm={false}
                            />
                        )}
                        {!showComboBox && (
                            <Form
                                onSubmit={(e: React.FormEvent) => {
                                    e.preventDefault();
                                    form.setRequest({
                                        businessId: business.id,
                                        userId: selectedUser?.id,
                                        companyEmail: formHandler.values.companyEmail,
                                    });

                                    formHandler.handleSubmit();
                                }}
                                submitButtonText="Create"
                                valid={formHandler.isValid}
                            >
                                <FormGroup className={styles.formGroup}>
                                    <TextField
                                        className={styles.textField}
                                        id="name"
                                        label="Name"
                                        type="text"
                                        value={selectedUser?.name ?? ''}
                                        disabled={true}
                                    />
                                </FormGroup>
                                <FormGroup className={styles.formGroup}>
                                    <TextField
                                        className={styles.textField}
                                        id="privateEmail"
                                        label="Private Email"
                                        type="email"
                                        value={selectedUser?.email ?? ''}
                                        disabled={true}
                                    />
                                </FormGroup>
                                <FormGroup className={styles.formGroup}>
                                    <TextField
                                        className={styles.textField}
                                        id="companyEmail"
                                        label="Company Email"
                                        type="email"
                                        value={formHandler.values.companyEmail}
                                        onChange={formHandler.handleChange}
                                        onBlur={formHandler.handleBlur}
                                        error={
                                            formHandler.touched.companyEmail &&
                                            Boolean(formHandler.errors.companyEmail)
                                        }
                                        helperText={
                                            formHandler.touched.companyEmail &&
                                            formHandler.errors.companyEmail
                                        }
                                    />
                                </FormGroup>
                            </Form>
                        )}
                    </Card>
                </Col>
            </Row>
        </>
    );
};
