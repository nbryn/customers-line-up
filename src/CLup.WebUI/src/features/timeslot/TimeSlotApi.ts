import Cookies from 'js-cookie';

import {BUSINESS_BY_OWNER_TAG, BUSINESS_TAG, baseApi, USER_TAG} from '../../app/Store';
import {Configuration, TimeSlotApi, type GenerateTimeSlotsRequest} from '../../autogenerated';

const timeSlotApiInstance = new TimeSlotApi(
    new Configuration({accessToken: Cookies.get('access_token')})
);

const timeSlotApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
        generateTimeSlots: builder.mutation<void, GenerateTimeSlotsRequest>({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG],
            queryFn: async (generateTimeSlotsRequest) => {
                try {
                    await timeSlotApiInstance.generateTimeSlots(generateTimeSlotsRequest);
                } catch (error) {
                    return {error} as any;
                }
            },
        }),
        deleteTimeSlot: builder.mutation<void, {timeSlotId: string; businessId: string}>({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (request) => {
                try {
                    await timeSlotApiInstance.deleteTimeSlot(
                        request.timeSlotId,
                        request.businessId
                    );
                } catch (error) {
                    return {error} as any;
                }
            },
        }),
    }),
});

export const {useGenerateTimeSlotsMutation, useDeleteTimeSlotMutation} = timeSlotApi;
