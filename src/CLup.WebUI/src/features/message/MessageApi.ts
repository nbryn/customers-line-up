import Cookies from 'js-cookie';

import {BUSINESS_BY_OWNER_TAG, BUSINESS_TAG, baseApi, USER_TAG} from '../../app/Store';
import {
    Configuration,
    MessageApi,
    type SendUserMessageRequest,
    type SendBusinessMessageRequest,
    type MarkMessageAsDeletedForUserRequest,
    type MarkMessageAsDeletedForBusinessRequest,
} from '../../autogenerated';
import {apiMutation} from '../../shared/api/Api';

const MESSAGE_SENT = 'Message successfully send';

const messageApiInstance = new MessageApi(
    new Configuration({accessToken: Cookies.get('access_token')})
);

const messageApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
        sendUserMessage: builder.mutation<void, SendUserMessageRequest>({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (sendUserMessageRequest, api) => ({
                data: await apiMutation(
                    async () => await messageApiInstance.sendUserMessage(sendUserMessageRequest),
                    api,
                    {message: MESSAGE_SENT}
                ),
            }),
        }),
        sendBusinessMessage: builder.mutation<void, SendBusinessMessageRequest>({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (sendBusinessMessageRequest, api) => ({
                data: await apiMutation(
                    async () =>
                        await messageApiInstance.sendBusinessMessage(sendBusinessMessageRequest),
                    api
                ),
            }),
        }),
        markMessageAsDeletedForUser: builder.mutation<void, MarkMessageAsDeletedForUserRequest>({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (markMessageAsDeletedForUserRequest, api) => ({
                data: await apiMutation(
                    async () =>
                        await messageApiInstance.markMessageAsDeletedForUser(
                            markMessageAsDeletedForUserRequest
                        ),
                    api
                ),
            }),
        }),
        markMessageAsDeletedForBusiness: builder.mutation<
            void,
            MarkMessageAsDeletedForBusinessRequest
        >({
            invalidatesTags: [BUSINESS_TAG, BUSINESS_BY_OWNER_TAG, USER_TAG],
            queryFn: async (markMessageAsDeletedForBusinessRequest, api) => ({
                data: await apiMutation(
                    async () =>
                        await messageApiInstance.markMessageAsDeletedForBusiness(
                            markMessageAsDeletedForBusinessRequest
                        ),
                    api
                ),
            }),
        }),
    }),
});

export const {
    useSendUserMessageMutation,
    useSendBusinessMessageMutation,
    useMarkMessageAsDeletedForUserMutation,
    useMarkMessageAsDeletedForBusinessMutation,
} = messageApi;
