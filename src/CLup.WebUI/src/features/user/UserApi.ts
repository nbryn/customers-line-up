import Cookies from 'js-cookie';

import {baseApi, USER_TAG} from '../../app/Store';
import {Configuration, QueryApi, UserApi} from '../../autogenerated';
import type {
    UpdateUserRequest,
    UserDto,
    UsersNotEmployedByBusinessResponse,
} from '../../autogenerated';

// This should be moved
// Ideally we want to instantiate all Api clients after login/register
// Check obex.ui?
// Create utility queryFn with try catch that instantiate the Api client
const queryApi = new QueryApi(new Configuration({accessToken: Cookies.get('access_token')}));
const userApiInstance = new UserApi(new Configuration({accessToken: Cookies.get('access_token')}));

const userApi = baseApi.injectEndpoints({
    endpoints: (builder) => ({
        getUser: builder.query<UserDto, void>({
            providesTags: [USER_TAG],
            queryFn: async () => {
                try {
                    const response = await queryApi.getUser();
                    return {data: response.data.user!};
                } catch (error) {
                    return {error} as {data: UserDto; error: any};
                }
            },
        }),
        usersNotEmployedByBusiness: builder.query<UsersNotEmployedByBusinessResponse, string>({
            queryFn: async (businessId) => {
                try {
                    const response = await queryApi.getUsersNotAlreadyEmployedByBusiness(
                        businessId,
                        ''
                    );
                    return {data: response.data};
                } catch (error) {
                    return {error} as {data: UsersNotEmployedByBusinessResponse; error: any};
                }
            },
        }),
        updateUser: builder.mutation<void, UpdateUserRequest>({
            invalidatesTags: [USER_TAG],
            queryFn: async (updateUserRequest) => {
                try {
                    await userApiInstance.updateUser(updateUserRequest);
                } catch (error) {
                    return {error} as any;
                }
            },
        }),
    }),
});

export const {useGetUserQuery} = userApi;
