import React from 'react';
import {Col, Row} from 'react-bootstrap';
import makeStyles from '@mui/styles/makeStyles';

import {FormCard} from '../../shared/components/card/FormCard';
import {Header} from '../../shared/components/Texts';
import {useGetUserQuery, useUpdateUserMutation} from './UserApi';
import {useAddress} from '../../shared/hooks/useAddress';
import {type Index, useForm} from '../../shared/hooks/useForm';
import {userValidationSchema} from './UserValidation';
import {type UpdateUserRequest} from '../../autogenerated';

const useStyles = makeStyles(() => ({
    card: {
        marginTop: 60,
        borderRadius: 15,
        height: 600,
        textAlign: 'center',
    },
    formGroup: {
        marginBottom: 30,
    },
    header: {
        justifyContent: 'center',
        marginBottom: 20,
    },
    helperText: {
        color: 'red',
    },
    textField: {
        width: '75%',
    },
    wrapper: {
        justifyContent: 'center',
    },
}));

export const ProfileView: React.FC = () => {
    const [updateUser] = useUpdateUserMutation();
    const {data: user} = useGetUserQuery();
    const styles = useStyles();

    const formValues = {
        email: user?.email ?? '',
        name: user?.name ?? '',
        zip: user?.address?.zip ?? 0,
        street: user?.address?.street ?? '',
    };

    const {formHandler} = useForm<typeof formValues & Index>({
        initialValues: formValues,
        validationSchema: userValidationSchema,
        onSubmit: async (formValues) => {
            const address = addressHandler.addresses.find(
                (address) => address.street === formValues.street
            );

            await updateUser({...formValues, address} as UpdateUserRequest);
        },
    });

    const addressHandler = useAddress(formHandler);
    return (
        <>
            <Row className={styles.header}>
                <Header text="Profile" />
            </Row>
            <Row className={styles.wrapper}>
                <Col sm={6} lg={6}>
                    <FormCard
                        title="User Data"
                        formData={formValues}
                        entity={user}
                        buttonText="Save Changes"
                        primaryDisabled={!formHandler.isValid}
                        buttonAction={formHandler.handleSubmit}
                        formHandler={formHandler}
                        addressHandler={addressHandler}
                    />
                </Col>
            </Row>
        </>
    );
};
