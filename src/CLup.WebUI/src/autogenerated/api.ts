/* tslint:disable */
/* eslint-disable */
/**
 * Customers Lineup Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street': string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'zip': number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city': string;
    /**
     * 
     * @type {Coords}
     * @memberof Address
     */
    'coords': Coords;
}
/**
 * 
 * @export
 * @interface BookingDto
 */
export interface BookingDto {
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'timeSlotId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'businessId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'business'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BookingDto
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof BookingDto
     */
    'latitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'userEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'interval'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookingDto
     */
    'capacity'?: string | null;
}
/**
 * 
 * @export
 * @interface BusinessDto
 */
export interface BusinessDto {
    /**
     * 
     * @type {string}
     * @memberof BusinessDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessDto
     */
    'ownerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {Address}
     * @memberof BusinessDto
     */
    'address'?: Address;
    /**
     * 
     * @type {TimeInterval}
     * @memberof BusinessDto
     */
    'businessHours'?: TimeInterval;
    /**
     * 
     * @type {number}
     * @memberof BusinessDto
     */
    'timeSlotLengthInMinutes'?: number;
    /**
     * 
     * @type {BusinessType}
     * @memberof BusinessDto
     */
    'type'?: BusinessType;
    /**
     * 
     * @type {number}
     * @memberof BusinessDto
     */
    'capacity'?: number;
    /**
     * 
     * @type {Array<BookingDto>}
     * @memberof BusinessDto
     */
    'bookings'?: Array<BookingDto> | null;
    /**
     * 
     * @type {Array<EmployeeDto>}
     * @memberof BusinessDto
     */
    'employees'?: Array<EmployeeDto> | null;
    /**
     * 
     * @type {Array<MessageDto>}
     * @memberof BusinessDto
     */
    'receivedMessages'?: Array<MessageDto> | null;
    /**
     * 
     * @type {Array<MessageDto>}
     * @memberof BusinessDto
     */
    'sentMessages'?: Array<MessageDto> | null;
    /**
     * 
     * @type {Array<TimeSlotDto>}
     * @memberof BusinessDto
     */
    'timeSlots'?: Array<TimeSlotDto> | null;
}


/**
 * 
 * @export
 * @enum {string}
 */

export enum BusinessType {
    Supermarket = 'Supermarket',
    Museum = 'Museum',
    Kiosk = 'Kiosk',
    Hairdresser = 'Hairdresser',
    Bakery = 'Bakery',
    Library = 'Library',
    Other = 'Other'
}


/**
 * 
 * @export
 * @interface Coords
 */
export interface Coords {
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface CreateBookingRequest
 */
export interface CreateBookingRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBookingRequest
     */
    'businessId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateBookingRequest
     */
    'timeSlotId': string;
}
/**
 * 
 * @export
 * @interface CreateBusinessRequest
 */
export interface CreateBusinessRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateBusinessRequest
     */
    'name': string;
    /**
     * 
     * @type {Address}
     * @memberof CreateBusinessRequest
     */
    'address': Address;
    /**
     * 
     * @type {TimeInterval}
     * @memberof CreateBusinessRequest
     */
    'businessHours': TimeInterval;
    /**
     * 
     * @type {number}
     * @memberof CreateBusinessRequest
     */
    'capacity': number;
    /**
     * 
     * @type {number}
     * @memberof CreateBusinessRequest
     */
    'timeSlotLengthInMinutes': number;
    /**
     * 
     * @type {BusinessType}
     * @memberof CreateBusinessRequest
     */
    'type': BusinessType;
}


/**
 * 
 * @export
 * @interface CreateEmployeeRequest
 */
export interface CreateEmployeeRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeRequest
     */
    'businessId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeRequest
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEmployeeRequest
     */
    'companyEmail'?: string | null;
}
/**
 * 
 * @export
 * @interface DateOnly
 */
export interface DateOnly {
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'year'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'day'?: number;
    /**
     * 
     * @type {DayOfWeek}
     * @memberof DateOnly
     */
    'dayOfWeek'?: DayOfWeek;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayOfYear'?: number;
    /**
     * 
     * @type {number}
     * @memberof DateOnly
     */
    'dayNumber'?: number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export enum DayOfWeek {
    Sunday = 'Sunday',
    Monday = 'Monday',
    Tuesday = 'Tuesday',
    Wednesday = 'Wednesday',
    Thursday = 'Thursday',
    Friday = 'Friday',
    Saturday = 'Saturday'
}


/**
 * 
 * @export
 * @interface EmployeeDto
 */
export interface EmployeeDto {
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'businessId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'privateEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'companyEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'business'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmployeeDto
     */
    'employedSince'?: string | null;
}
/**
 * 
 * @export
 * @interface GenerateTimeSlotsRequest
 */
export interface GenerateTimeSlotsRequest {
    /**
     * 
     * @type {string}
     * @memberof GenerateTimeSlotsRequest
     */
    'businessId': string;
    /**
     * 
     * @type {DateOnly}
     * @memberof GenerateTimeSlotsRequest
     */
    'date': DateOnly;
}
/**
 * 
 * @export
 * @interface GetAllBusinessesResponse
 */
export interface GetAllBusinessesResponse {
    /**
     * 
     * @type {Array<BusinessDto>}
     * @memberof GetAllBusinessesResponse
     */
    'businesses'?: Array<BusinessDto> | null;
}
/**
 * 
 * @export
 * @interface GetBusinessResponse
 */
export interface GetBusinessResponse {
    /**
     * 
     * @type {BusinessDto}
     * @memberof GetBusinessResponse
     */
    'business'?: BusinessDto;
}
/**
 * 
 * @export
 * @interface GetBusinessesByOwnerResponse
 */
export interface GetBusinessesByOwnerResponse {
    /**
     * 
     * @type {Array<BusinessDto>}
     * @memberof GetBusinessesByOwnerResponse
     */
    'businesses'?: Array<BusinessDto> | null;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {UserDto}
     * @memberof GetUserResponse
     */
    'user'?: UserDto;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MarkMessageAsDeletedForBusinessRequest
 */
export interface MarkMessageAsDeletedForBusinessRequest {
    /**
     * 
     * @type {string}
     * @memberof MarkMessageAsDeletedForBusinessRequest
     */
    'senderId': string;
    /**
     * 
     * @type {string}
     * @memberof MarkMessageAsDeletedForBusinessRequest
     */
    'messageId': string;
    /**
     * 
     * @type {boolean}
     * @memberof MarkMessageAsDeletedForBusinessRequest
     */
    'receivedMessage': boolean;
}
/**
 * 
 * @export
 * @interface MarkMessageAsDeletedForUserRequest
 */
export interface MarkMessageAsDeletedForUserRequest {
    /**
     * 
     * @type {string}
     * @memberof MarkMessageAsDeletedForUserRequest
     */
    'messageId': string;
    /**
     * 
     * @type {boolean}
     * @memberof MarkMessageAsDeletedForUserRequest
     */
    'receivedMessage': boolean;
}
/**
 * 
 * @export
 * @interface MessageDto
 */
export interface MessageDto {
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'senderId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'receiverId'?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'content'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageDto
     */
    'date'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum MessageType {
    BookingDeleted = 'BookingDeleted',
    Enquiry = 'Enquiry'
}


/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'name': string;
    /**
     * 
     * @type {Address}
     * @memberof RegisterRequest
     */
    'address': Address;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Role {
    User = 'User',
    Employee = 'Employee',
    Owner = 'Owner',
    Admin = 'Admin'
}


/**
 * 
 * @export
 * @interface SendBusinessMessageRequest
 */
export interface SendBusinessMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof SendBusinessMessageRequest
     */
    'senderId': string;
    /**
     * 
     * @type {string}
     * @memberof SendBusinessMessageRequest
     */
    'receiverId': string;
    /**
     * 
     * @type {string}
     * @memberof SendBusinessMessageRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SendBusinessMessageRequest
     */
    'content': string;
    /**
     * 
     * @type {MessageType}
     * @memberof SendBusinessMessageRequest
     */
    'type': MessageType;
}


/**
 * 
 * @export
 * @interface SendUserMessageRequest
 */
export interface SendUserMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof SendUserMessageRequest
     */
    'receiverId': string;
    /**
     * 
     * @type {string}
     * @memberof SendUserMessageRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof SendUserMessageRequest
     */
    'content': string;
    /**
     * 
     * @type {MessageType}
     * @memberof SendUserMessageRequest
     */
    'type': MessageType;
}


/**
 * 
 * @export
 * @interface TimeInterval
 */
export interface TimeInterval {
    /**
     * 
     * @type {TimeOnly}
     * @memberof TimeInterval
     */
    'start': TimeOnly;
    /**
     * 
     * @type {TimeOnly}
     * @memberof TimeInterval
     */
    'end': TimeOnly;
}
/**
 * 
 * @export
 * @interface TimeOnly
 */
export interface TimeOnly {
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'hour'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'minute'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'second'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'millisecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'microsecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'nanosecond'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeOnly
     */
    'ticks'?: number;
}
/**
 * 
 * @export
 * @interface TimeSlotDto
 */
export interface TimeSlotDto {
    /**
     * 
     * @type {string}
     * @memberof TimeSlotDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeSlotDto
     */
    'businessId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TimeSlotDto
     */
    'business'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TimeSlotDto
     */
    'date'?: string | null;
    /**
     * 
     * @type {TimeInterval}
     * @memberof TimeSlotDto
     */
    'timeInterval'?: TimeInterval;
    /**
     * 
     * @type {string}
     * @memberof TimeSlotDto
     */
    'capacity'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TimeSlotDto
     */
    'available'?: boolean;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateBusinessRequest
 */
export interface UpdateBusinessRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessRequest
     */
    'businessId': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateBusinessRequest
     */
    'name': string;
    /**
     * 
     * @type {Address}
     * @memberof UpdateBusinessRequest
     */
    'address': Address;
    /**
     * 
     * @type {TimeInterval}
     * @memberof UpdateBusinessRequest
     */
    'businessHours'?: TimeInterval;
    /**
     * 
     * @type {number}
     * @memberof UpdateBusinessRequest
     */
    'capacity': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateBusinessRequest
     */
    'timeSlotLengthInMinutes': number;
    /**
     * 
     * @type {BusinessType}
     * @memberof UpdateBusinessRequest
     */
    'type': BusinessType;
}


/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'name': string;
    /**
     * 
     * @type {Address}
     * @memberof UpdateUserRequest
     */
    'address': Address;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string | null;
    /**
     * 
     * @type {Address}
     * @memberof UserDto
     */
    'address'?: Address;
    /**
     * 
     * @type {Role}
     * @memberof UserDto
     */
    'role'?: Role;
    /**
     * 
     * @type {Array<BookingDto>}
     * @memberof UserDto
     */
    'bookings'?: Array<BookingDto> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDto
     */
    'businessIds'?: Array<string> | null;
    /**
     * 
     * @type {Array<MessageDto>}
     * @memberof UserDto
     */
    'receivedMessages'?: Array<MessageDto> | null;
    /**
     * 
     * @type {Array<MessageDto>}
     * @memberof UserDto
     */
    'sentMessages'?: Array<MessageDto> | null;
}


/**
 * 
 * @export
 * @interface UsersNotEmployedByBusinessResponse
 */
export interface UsersNotEmployedByBusinessResponse {
    /**
     * 
     * @type {string}
     * @memberof UsersNotEmployedByBusinessResponse
     */
    'businessId'?: string;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof UsersNotEmployedByBusinessResponse
     */
    'users'?: Array<UserDto> | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (registerRequest?: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.login(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registerRequest?: RegisterRequest, options?: any): AxiosPromise<TokenResponse> {
            return localVarFp.register(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(registerRequest?: RegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookingApi - axios parameter creator
 * @export
 */
export const BookingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBookingRequest} [createBookingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBooking: async (createBookingRequest?: CreateBookingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/booking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBookingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessId 
         * @param {string} [bookingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessBooking: async (businessId: string, bookingId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('deleteBusinessBooking', 'businessId', businessId)
            const localVarPath = `/api/booking/business/{businessId}`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (bookingId !== undefined) {
                localVarQueryParameter['bookingId'] = bookingId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserBooking: async (bookingId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            assertParamExists('deleteUserBooking', 'bookingId', bookingId)
            const localVarPath = `/api/booking/user/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingApi - functional programming interface
 * @export
 */
export const BookingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBookingRequest} [createBookingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBooking(createBookingRequest?: CreateBookingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBooking(createBookingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingApi.createBooking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessId 
         * @param {string} [bookingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessBooking(businessId: string, bookingId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessBooking(businessId, bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingApi.deleteBusinessBooking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserBooking(bookingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserBooking(bookingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookingApi.deleteUserBooking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookingApi - factory interface
 * @export
 */
export const BookingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookingApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBookingRequest} [createBookingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBooking(createBookingRequest?: CreateBookingRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createBooking(createBookingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessId 
         * @param {string} [bookingId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessBooking(businessId: string, bookingId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteBusinessBooking(businessId, bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserBooking(bookingId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserBooking(bookingId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookingApi - object-oriented interface
 * @export
 * @class BookingApi
 * @extends {BaseAPI}
 */
export class BookingApi extends BaseAPI {
    /**
     * 
     * @param {CreateBookingRequest} [createBookingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public createBooking(createBookingRequest?: CreateBookingRequest, options?: RawAxiosRequestConfig) {
        return BookingApiFp(this.configuration).createBooking(createBookingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessId 
     * @param {string} [bookingId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public deleteBusinessBooking(businessId: string, bookingId?: string, options?: RawAxiosRequestConfig) {
        return BookingApiFp(this.configuration).deleteBusinessBooking(businessId, bookingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingApi
     */
    public deleteUserBooking(bookingId: string, options?: RawAxiosRequestConfig) {
        return BookingApiFp(this.configuration).deleteUserBooking(bookingId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BusinessApi - axios parameter creator
 * @export
 */
export const BusinessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateBusinessRequest} [createBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness: async (createBusinessRequest?: CreateBusinessRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBusinessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateBusinessRequest} [updateBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness: async (updateBusinessRequest?: UpdateBusinessRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBusinessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessApi - functional programming interface
 * @export
 */
export const BusinessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateBusinessRequest} [createBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBusiness(createBusinessRequest?: CreateBusinessRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBusiness(createBusinessRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessApi.createBusiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateBusinessRequest} [updateBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBusiness(updateBusinessRequest?: UpdateBusinessRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusiness(updateBusinessRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BusinessApi.updateBusiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BusinessApi - factory interface
 * @export
 */
export const BusinessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateBusinessRequest} [createBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusiness(createBusinessRequest?: CreateBusinessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createBusiness(createBusinessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateBusinessRequest} [updateBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBusiness(updateBusinessRequest?: UpdateBusinessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateBusiness(updateBusinessRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BusinessApi - object-oriented interface
 * @export
 * @class BusinessApi
 * @extends {BaseAPI}
 */
export class BusinessApi extends BaseAPI {
    /**
     * 
     * @param {CreateBusinessRequest} [createBusinessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public createBusiness(createBusinessRequest?: CreateBusinessRequest, options?: RawAxiosRequestConfig) {
        return BusinessApiFp(this.configuration).createBusiness(createBusinessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateBusinessRequest} [updateBusinessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessApi
     */
    public updateBusiness(updateBusinessRequest?: UpdateBusinessRequest, options?: RawAxiosRequestConfig) {
        return BusinessApiFp(this.configuration).updateBusiness(updateBusinessRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EmployeeApi - axios parameter creator
 * @export
 */
export const EmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateEmployeeRequest} [createEmployeeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee: async (createEmployeeRequest?: CreateEmployeeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee: async (employeeId: string, businessId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteEmployee', 'employeeId', employeeId)
            const localVarPath = `/api/employee/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['businessId'] = businessId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeApi - functional programming interface
 * @export
 */
export const EmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateEmployeeRequest} [createEmployeeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployee(createEmployeeRequest?: CreateEmployeeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployee(createEmployeeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.createEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployee(employeeId: string, businessId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployee(employeeId, businessId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EmployeeApi.deleteEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EmployeeApi - factory interface
 * @export
 */
export const EmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateEmployeeRequest} [createEmployeeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployee(createEmployeeRequest?: CreateEmployeeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.createEmployee(createEmployeeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} employeeId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployee(employeeId: string, businessId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmployee(employeeId, businessId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmployeeApi - object-oriented interface
 * @export
 * @class EmployeeApi
 * @extends {BaseAPI}
 */
export class EmployeeApi extends BaseAPI {
    /**
     * 
     * @param {CreateEmployeeRequest} [createEmployeeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public createEmployee(createEmployeeRequest?: CreateEmployeeRequest, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).createEmployee(createEmployeeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} employeeId 
     * @param {string} [businessId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeApi
     */
    public deleteEmployee(employeeId: string, businessId?: string, options?: RawAxiosRequestConfig) {
        return EmployeeApiFp(this.configuration).deleteEmployee(employeeId, businessId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MarkMessageAsDeletedForBusinessRequest} [markMessageAsDeletedForBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedForBusiness: async (markMessageAsDeletedForBusinessRequest?: MarkMessageAsDeletedForBusinessRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/message/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markMessageAsDeletedForBusinessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarkMessageAsDeletedForUserRequest} [markMessageAsDeletedForUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedForUser: async (markMessageAsDeletedForUserRequest?: MarkMessageAsDeletedForUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/message/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markMessageAsDeletedForUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendBusinessMessageRequest} [sendBusinessMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBusinessMessage: async (sendBusinessMessageRequest?: SendBusinessMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/message/business`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendBusinessMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendUserMessageRequest} [sendUserMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendUserMessage: async (sendUserMessageRequest?: SendUserMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/message/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendUserMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MarkMessageAsDeletedForBusinessRequest} [markMessageAsDeletedForBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest?: MarkMessageAsDeletedForBusinessRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.markMessageAsDeletedForBusiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MarkMessageAsDeletedForUserRequest} [markMessageAsDeletedForUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest?: MarkMessageAsDeletedForUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.markMessageAsDeletedForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SendBusinessMessageRequest} [sendBusinessMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendBusinessMessage(sendBusinessMessageRequest?: SendBusinessMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendBusinessMessage(sendBusinessMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.sendBusinessMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SendUserMessageRequest} [sendUserMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendUserMessage(sendUserMessageRequest?: SendUserMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendUserMessage(sendUserMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MessageApi.sendUserMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         * 
         * @param {MarkMessageAsDeletedForBusinessRequest} [markMessageAsDeletedForBusinessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest?: MarkMessageAsDeletedForBusinessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MarkMessageAsDeletedForUserRequest} [markMessageAsDeletedForUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest?: MarkMessageAsDeletedForUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendBusinessMessageRequest} [sendBusinessMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendBusinessMessage(sendBusinessMessageRequest?: SendBusinessMessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendBusinessMessage(sendBusinessMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendUserMessageRequest} [sendUserMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendUserMessage(sendUserMessageRequest?: SendUserMessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.sendUserMessage(sendUserMessageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * 
     * @param {MarkMessageAsDeletedForBusinessRequest} [markMessageAsDeletedForBusinessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest?: MarkMessageAsDeletedForBusinessRequest, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).markMessageAsDeletedForBusiness(markMessageAsDeletedForBusinessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MarkMessageAsDeletedForUserRequest} [markMessageAsDeletedForUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest?: MarkMessageAsDeletedForUserRequest, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).markMessageAsDeletedForUser(markMessageAsDeletedForUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendBusinessMessageRequest} [sendBusinessMessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public sendBusinessMessage(sendBusinessMessageRequest?: SendBusinessMessageRequest, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).sendBusinessMessage(sendBusinessMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendUserMessageRequest} [sendUserMessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public sendUserMessage(sendUserMessageRequest?: SendUserMessageRequest, options?: RawAxiosRequestConfig) {
        return MessageApiFp(this.configuration).sendUserMessage(sendUserMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinesses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/query/business/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness: async (businessId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getBusiness', 'businessId', businessId)
            const localVarPath = `/api/query/user/business/{businessId}`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessesByOwner: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/query/user/businesses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/query/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersNotAlreadyEmployedByBusiness: async (businessId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessId' is not null or undefined
            assertParamExists('getUsersNotAlreadyEmployedByBusiness', 'businessId', businessId)
            const localVarPath = `/api/query/user/notemployedbybusiness/{businessId}`
                .replace(`{${"businessId"}}`, encodeURIComponent(String(businessId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBusinesses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAllBusinessesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBusinesses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.getAllBusinesses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusiness(businessId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusiness(businessId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.getBusiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessesByOwner(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessesByOwnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessesByOwner(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.getBusinessesByOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersNotAlreadyEmployedByBusiness(businessId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersNotEmployedByBusinessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersNotAlreadyEmployedByBusiness(businessId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryApi.getUsersNotAlreadyEmployedByBusiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBusinesses(options?: any): AxiosPromise<GetAllBusinessesResponse> {
            return localVarFp.getAllBusinesses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusiness(businessId: string, options?: any): AxiosPromise<GetBusinessResponse> {
            return localVarFp.getBusiness(businessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessesByOwner(options?: any): AxiosPromise<GetBusinessesByOwnerResponse> {
            return localVarFp.getBusinessesByOwner(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersNotAlreadyEmployedByBusiness(businessId: string, options?: any): AxiosPromise<UsersNotEmployedByBusinessResponse> {
            return localVarFp.getUsersNotAlreadyEmployedByBusiness(businessId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getAllBusinesses(options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).getAllBusinesses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getBusiness(businessId: string, options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).getBusiness(businessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getBusinessesByOwner(options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).getBusinessesByOwner(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getUsersNotAlreadyEmployedByBusiness(businessId: string, options?: RawAxiosRequestConfig) {
        return QueryApiFp(this.configuration).getUsersNotAlreadyEmployedByBusiness(businessId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TimeSlotApi - axios parameter creator
 * @export
 */
export const TimeSlotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} timeSlotId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeSlot: async (timeSlotId: string, businessId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeSlotId' is not null or undefined
            assertParamExists('deleteTimeSlot', 'timeSlotId', timeSlotId)
            const localVarPath = `/api/timeslot/{timeSlotId}`
                .replace(`{${"timeSlotId"}}`, encodeURIComponent(String(timeSlotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (businessId !== undefined) {
                localVarQueryParameter['businessId'] = businessId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GenerateTimeSlotsRequest} [generateTimeSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTimeSlots: async (generateTimeSlotsRequest?: GenerateTimeSlotsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/timeslot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateTimeSlotsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeSlotApi - functional programming interface
 * @export
 */
export const TimeSlotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeSlotApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} timeSlotId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeSlot(timeSlotId: string, businessId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeSlot(timeSlotId, businessId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeSlotApi.deleteTimeSlot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GenerateTimeSlotsRequest} [generateTimeSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTimeSlots(generateTimeSlotsRequest?: GenerateTimeSlotsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTimeSlots(generateTimeSlotsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TimeSlotApi.generateTimeSlots']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TimeSlotApi - factory interface
 * @export
 */
export const TimeSlotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeSlotApiFp(configuration)
    return {
        /**
         * 
         * @param {string} timeSlotId 
         * @param {string} [businessId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeSlot(timeSlotId: string, businessId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTimeSlot(timeSlotId, businessId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GenerateTimeSlotsRequest} [generateTimeSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTimeSlots(generateTimeSlotsRequest?: GenerateTimeSlotsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.generateTimeSlots(generateTimeSlotsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeSlotApi - object-oriented interface
 * @export
 * @class TimeSlotApi
 * @extends {BaseAPI}
 */
export class TimeSlotApi extends BaseAPI {
    /**
     * 
     * @param {string} timeSlotId 
     * @param {string} [businessId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSlotApi
     */
    public deleteTimeSlot(timeSlotId: string, businessId?: string, options?: RawAxiosRequestConfig) {
        return TimeSlotApiFp(this.configuration).deleteTimeSlot(timeSlotId, businessId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GenerateTimeSlotsRequest} [generateTimeSlotsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeSlotApi
     */
    public generateTimeSlots(generateTimeSlotsRequest?: GenerateTimeSlotsRequest, options?: RawAxiosRequestConfig) {
        return TimeSlotApiFp(this.configuration).generateTimeSlots(generateTimeSlotsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (updateUserRequest?: UpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(updateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {UpdateUserRequest} [updateUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(updateUserRequest?: UpdateUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateUser(updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UpdateUserRequest} [updateUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUser(updateUserRequest?: UpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUser(updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



