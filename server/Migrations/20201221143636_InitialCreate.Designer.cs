// <auto-generated />
using System;
using Logic.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CLup.Migrations
{
    [DbContext(typeof(CLupContext))]
    [Migration("20201221143636_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Logic.Bookings.Booking", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.HasKey("UserEmail", "TimeSlotId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            UserEmail = "test@test.com",
                            TimeSlotId = 1,
                            BusinessId = 1
                        },
                        new
                        {
                            UserEmail = "test@test.com",
                            TimeSlotId = 2,
                            BusinessId = 1
                        },
                        new
                        {
                            UserEmail = "test@test.com",
                            TimeSlotId = 3,
                            BusinessId = 1
                        });
                });

            modelBuilder.Entity("Logic.BusinessOwners.BusinessOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail")
                        .IsUnique()
                        .HasFilter("[UserEmail] IS NOT NULL");

                    b.ToTable("BusinessOwners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserEmail = "test@test.com"
                        });
                });

            modelBuilder.Entity("Logic.Businesses.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessOwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Closes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Opens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSlotLength")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOwnerId");

                    b.ToTable("Businesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 50,
                            Closes = "16.00",
                            Name = "Cool",
                            Opens = "10.00",
                            OwnerEmail = "test@test.com",
                            TimeSlotLength = 50,
                            Type = "Supermarket",
                            Zip = 3520
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 40,
                            Closes = "14.00",
                            Name = "Shop",
                            Opens = "09.00",
                            OwnerEmail = "test@test.com",
                            TimeSlotLength = 20,
                            Type = "Museum",
                            Zip = 3520
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 30,
                            Closes = "15.30",
                            Name = "1337",
                            Opens = "08.30",
                            OwnerEmail = "test@test.com",
                            TimeSlotLength = 10,
                            Type = "Kiosk",
                            Zip = 4720
                        });
                });

            modelBuilder.Entity("Logic.Employees.Employee", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserEmail", "BusinessId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            UserEmail = "h@h.com",
                            BusinessId = 1,
                            CreatedAt = new DateTime(2020, 12, 21, 15, 36, 36, 10, DateTimeKind.Local).AddTicks(6818),
                            Id = 1
                        },
                        new
                        {
                            UserEmail = "mads@hotmail.com",
                            BusinessId = 1,
                            CreatedAt = new DateTime(2020, 12, 21, 15, 36, 36, 10, DateTimeKind.Local).AddTicks(7728),
                            Id = 2
                        });
                });

            modelBuilder.Entity("Logic.TimeSlots.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessId = 1,
                            BusinessName = "Cool",
                            Capacity = 50,
                            End = new DateTime(2020, 12, 21, 19, 36, 36, 10, DateTimeKind.Local).AddTicks(4007),
                            Start = new DateTime(2020, 12, 21, 18, 36, 36, 7, DateTimeKind.Local).AddTicks(9091)
                        },
                        new
                        {
                            Id = 2,
                            BusinessId = 1,
                            BusinessName = "Cool",
                            Capacity = 40,
                            End = new DateTime(2020, 12, 21, 20, 36, 36, 10, DateTimeKind.Local).AddTicks(4362),
                            Start = new DateTime(2020, 12, 21, 19, 36, 36, 10, DateTimeKind.Local).AddTicks(4355)
                        },
                        new
                        {
                            Id = 3,
                            BusinessId = 1,
                            BusinessName = "Cool",
                            Capacity = 30,
                            End = new DateTime(2020, 12, 21, 21, 36, 36, 10, DateTimeKind.Local).AddTicks(4365),
                            Start = new DateTime(2020, 12, 21, 20, 36, 36, 10, DateTimeKind.Local).AddTicks(4364)
                        });
                });

            modelBuilder.Entity("Logic.Users.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zip")
                        .HasColumnType("int");

                    b.HasKey("Email");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Email = "test@test.com",
                            Id = 1,
                            Name = "Peter",
                            Password = "$2a$11$6IrGtqz4hlA.WUruI40oFemQgvDYCqkJY2hA13MiA3VzjJ4Jh2rWK",
                            Zip = 3520
                        },
                        new
                        {
                            Email = "h@h.com",
                            Id = 2,
                            Name = "Jens",
                            Password = "$2a$11$oyuipSd8ivJJFtkLJUO3aO3sNCg/W.lREsQKV3TZEKGvLveL8B5ZG",
                            Zip = 2300
                        },
                        new
                        {
                            Email = "mads@hotmail.com",
                            Id = 3,
                            Name = "Mads",
                            Password = "$2a$11$ajaWGNX8Bq6qBxSCihX4o.YFwhfRYnqtNqGKZ/KAsqOTAJBQACqIW",
                            Zip = 2700
                        });
                });

            modelBuilder.Entity("Logic.Bookings.Booking", b =>
                {
                    b.HasOne("Logic.TimeSlots.TimeSlot", "TimeSlot")
                        .WithMany("Bookings")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logic.Users.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logic.Businesses.Business", b =>
                {
                    b.HasOne("Logic.BusinessOwners.BusinessOwner", null)
                        .WithMany("Businesses")
                        .HasForeignKey("BusinessOwnerId");
                });

            modelBuilder.Entity("Logic.Employees.Employee", b =>
                {
                    b.HasOne("Logic.Businesses.Business", "Business")
                        .WithMany("Employees")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logic.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logic.TimeSlots.TimeSlot", b =>
                {
                    b.HasOne("Logic.Businesses.Business", "Business")
                        .WithMany("TimeSlots")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
